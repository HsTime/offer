    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if(pre.empty()&&vin.empty())
            return NULL;
        TreeNode* root = new TreeNode(pre[0]);
        int pos = 0;
        for(pos;pos<vin.size();pos++)
            {
            if(pre[0] == vin[pos])
                break;
        }
        vector<int>_preleft,_vinleft,_preright,_vinright;
        for(int i = 0;i<pos;i++)
            {
            _preleft.push_back(pre[i+1]);
            _vinleft.push_back(vin[i]);
        }
        for(int j = pos+1;j<vin.size();j++)
            {
            _preright.push_back(pre[j]);
            _vinright.push_back(vin[j]);
        }
        root->left = reConstructBinaryTree(_preleft,_vinleft);
        root->right = reConstructBinaryTree(_preright,_vinright);
        
        return root;
    }